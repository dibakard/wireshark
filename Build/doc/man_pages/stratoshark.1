'\" t
.\"     Title: stratoshark
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.16
.\"      Date: 2025-04-11
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "STRATOSHARK" "1" "2025-04-11" "\ \&" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
stratoshark \- System call and event log analyzer
.SH "SYNOPSIS"
.sp
\fBstratoshark\fP
[\~\fB\-i\fP\~<capture\~source>|\-\~]
[\~\fB\-f\fP\~<capture\~filter>\~]
[\~\fB\-Y\fP\~<display\~filter>\~]
[\~\fB\-w\fP\~<outfile>\~]
[\~\fBoptions\fP\~]
[\~<infile>\~]
.sp
\fBstratoshark\fP
\fB\-h|\-\-help\fP
.sp
\fBstratoshark\fP
\fB\-v|\-\-version\fP
.SH "DESCRIPTION"
.sp
\fBStratoshark\fP is a GUI system call and log analyzer.
It lets you interactively browse system calls and log messages from a live system or from a previously saved capture file.
\fBStratoshark\fP\*(Aqs native capture file format is \fBscap\fP, which is used by the sysdig CLI tool and by Falco.
.sp
\fBStratoshark\fP\*(Aqs main window shows 3 views of each event.
It shows a summary line, briefly describing what the event is.
An event details display is shown, allowing you to drill down to exact field that you interested in.
Finally, a hex dump shows you exactly what the event data looks like on disk or over the wire.
.sp
In addition, \fBStratoshark\fP has some features that make it unique.
It can assemble all the syscalls in a file descriptor stream and show you the ASCII (or EBCDIC, or hex) data in that conversation.
Display filters in \fBStratoshark\fP are very powerful; more fields are filterable in \fBStratoshark\fP than in other tools, and the syntax you can use to create your filters is richer.
As \fBStratoshark\fP progresses, expect more and more fields to be supported.
.sp
Event capturing is performed by the libscap and libsinsp libraries.
The capture filter syntax follows the rules of the libscap.
This syntax is different from the display filter syntax.
.sp
Compressed file support uses (and therefore requires) the zlib library.
If the zlib library is not present, \fBStratoshark\fP will compile, but will be unable to read compressed files.
.sp
The pathname of a capture file to be read can be specified with the
\fB\-r\fP option or can be specified as a command\-line argument.
.SH "OPTIONS"
.sp
\fBStratoshark\fP supports a wide variety of command line options.
Most users will want to start it without any options and configure it from the application menus instead.
Those users may wish to skip this section.
.sp
\-a|\-\-autostop  <capture autostop condition>
.RS 4
.sp
Specify a criterion that specifies when \fBStratoshark\fP should stop writing
to a capture file.  The criterion is of the form \fItest:value\fP,
where \fItest\fP is one of:
.sp
\fBduration\fP:\fIvalue\fP Stop writing to a capture file after \fIvalue\fP seconds have
elapsed. Floating point values (e.g. 0.5) are allowed.
.sp
\fBfiles\fP:\fIvalue\fP Stop writing to capture files after \fIvalue\fP number of files
were written.
.sp
\fBfilesize\fP:\fIvalue\fP Stop writing to a capture file after it reaches a size of
\fIvalue\fP kB.  If this option is used together with the \-b option, Stratoshark
will stop writing to the current capture file and switch to the next one if
filesize is reached.  Note that the filesize is limited to a maximum value of
2 TB, although you might have problems viewing the file in the GUI before then if
the number of events exceeds 231 (2147483648).
.sp
\fBevents\fP:\fIvalue\fP Stop writing to a capture file after it contains \fIvalue\fP events.
Acts the same as \fB\-c\fP<capture event count>.
.RE
.sp
\-b|\-\-ring\-buffer  <capture ring buffer option>
.RS 4
.sp
Cause \fBStratoshark\fP to run in "multiple files" mode.  In "multiple files" mode,
\fBStratoshark\fP will write to several capture files.  When the first capture file
fills up, \fBStratoshark\fP will switch writing to the next file and so on.
.sp
The created filenames are based on the filename given with the \fB\-w\fP flag,
the number of the file and on the creation date and time,
e.g. outfile_00001_20250714120117.pcap, outfile_00002_20250714120523.pcap, ...
.sp
With the \fIfiles\fP option it\(cqs also possible to form a "ring buffer".
This will fill up new files until the number of files specified,
at which point \fBStratoshark\fP will discard the data in the first file and start
writing to that file and so on.  If the \fIfiles\fP option is not set,
new files filled up until one of the capture stop conditions match (or
until the disk is full).
.sp
The criterion is of the form \fIkey:value\fP,
where \fIkey\fP is one of:
.sp
\fBduration\fP:\fIvalue\fP switch to the next file after \fIvalue\fP seconds have
elapsed, even if the current file is not completely filled up. Floating
point values (e.g. 0.5) are allowed.
.sp
\fBfiles\fP:\fIvalue\fP begin again with the first file after \fIvalue\fP number of
files were written (form a ring buffer).  This value must be less than 100000.
Caution should be used when using large numbers of files: some filesystems do
not handle many files in a single directory well.  The \fBfiles\fP criterion
requires one of the other criteria to be specified to
control when to go to the next file.  It should be noted that each \fB\-b\fP
parameter takes exactly one criterion; to specify two criteria, each must be
preceded by the \fB\-b\fP option.
.sp
\fBfilesize\fP:\fIvalue\fP switch to the next file after it reaches a size of
\fIvalue\fP kB.  Note that the filesize is limited to a maximum value of 2 TB,
although you might have problems viewing the file in the GUI before then if
the number of events exceeds 231 (2147483648).
.sp
\fBinterval\fP:\fIvalue\fP switch to the next file when the time is an exact
multiple of \fIvalue\fP seconds.
.sp
\fBevents\fP:\fIvalue\fP switch to the next file after it contains \fIvalue\fP events.
.sp
Example: \fB\-b filesize:1000 \-b files:5\fP results in a ring buffer of five files
of size one megabyte each.
.RE
.sp
\-c  <capture event count>
.RS 4
Set the maximum number of events to read when capturing live
data. Acts the same as \fB\-a events:\fP<capture event count>.
.RE
.sp
\-C  <configuration profile>
.RS 4
Start with the given configuration profile.
.RE
.sp
\-\-capture\-comment <comment>
.RS 4
.sp
When performing a capture file from the command line, with the \fB\-k\fP
flag, add a capture comment to the output file, if supported by the
capture format.
.sp
This option may be specified multiple times.  Note that Stratoshark
currently only displays the first comment of a capture file.
.RE
.sp
\-D|\-\-list\-sources
.RS 4
Print a list of the sources from which \fBStratoshark\fP can capture, and exit.
For each source, a number and a source name, possibly followed by a text description of the source, is printed.
The source name or the number can be supplied to the \fB\-i\fP flag to specify a source from which to capture.
.RE
.sp
\-\-display <X display to use>
.RS 4
Specifies the X display to use.  A hostname and screen (otherhost:0.0)
or just a screen (:0.0) can be specified.  This option is not available
under macOS or Windows.
.RE
.sp
\-f  <capture filter>
.RS 4
.sp
Set the capture filter expression.
.sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fP option, it sets the default capture filter expression.
If used after an \fB\-i\fP option, it sets the capture filter expression for
the source specified by the last \fB\-i\fP option occurring before
this option.  If the capture filter expression is not set specifically,
the default capture filter expression is used if provided.
.sp
Pre\-defined capture filter names, as shown in the GUI menu item Capture\(->Capture Filters,
can be used by prefixing the argument with "predef:".
Example: \fB\-f "predef:MyPredefinedHostOnlyFilter"\fP
.RE
.sp
\-\-fullscreen
.RS 4
.sp
Start Stratoshark in full screen mode (kiosk mode). To exit from fullscreen mode,
open the View menu and select the Full Screen option. Alternatively, press the
F11 key (or Ctrl + Cmd + F for macOS).
.RE
.sp
\-g  <event number>
.RS 4
After reading in a capture file using the \fB\-r\fP flag, go to the given \fIevent number\fP.
.RE
.sp
\-h|\-\-help
.RS 4
Print the version number and options and exit.
.RE
.sp
\-H
.RS 4
Hide the capture info dialog during live capture.
.RE
.sp
\-i|\-\-source  <capture source>|\-
.RS 4
.sp
Set the name of the capture source or pipe to use for live capture.
.sp
Capture source names should match one of the names or numbers listed in "\fBstratoshark \-D\fP" (described above).
.sp
If no source is specified, \fBStratoshark\fP searches the list of sources, choosing the first source.
If there are no sources at all, \fBStratoshark\fP reports an error and doesn\(cqt start the capture.
.sp
Pipe names should be either the name of a FIFO (named pipe) or "\-" to
read data from the standard input.  On Windows systems, pipe names must be
of the form "\(rs\(rs.\(rspipe\(rs\fBpipename\fP".  Data read from pipes must be in
standard scap format.
Scap data must have the same endianness as the capturing host.
.sp
This option can occur multiple times.
.RE
.sp
\-j
.RS 4
Use after \fB\-J\fP to change the behavior when no exact match is found for
the filter.  With this option select the first event before.
.RE
.sp
\-J  <jump filter>
.RS 4
.sp
After reading in a capture file using the \fB\-r\fP flag, jump to the event
matching the filter (display filter syntax).  If no exact match is found
the first event after that is selected.
.RE
.sp
\-k
.RS 4
.sp
Start the capture session immediately.  If the \fB\-i\fP flag was
specified, the capture uses the specified source.  Otherwise,
\fBStratoshark\fP searches the list of sources and uses the first source.
If there are no sources, \fBStratoshark\fP reports an error and doesn\(cqt start the capture.
.RE
.sp
\-l
.RS 4
Turn on automatic scrolling if the event display is being updated
automatically as events arrive during a capture (as specified by the
\fB\-S\fP flag).
.RE
.sp
\-L|\-\-list\-data\-link\-types
.RS 4
List the data link types supported by the interface and exit.
.RE
.sp
\-\-list\-time\-stamp\-types
.RS 4
List time stamp types supported for the interface. If no time stamp type can be
set, no time stamp types are listed.
.RE
.sp
\-o  <preference/recent setting>
.RS 4
.sp
Set a preference or recent value, overriding the default value and any value
read from a preference/recent file.  The argument to the flag is a string of
the form \fIprefname:value\fP, where \fIprefname\fP is the name of the
preference/recent value (which is the same name that would appear in the
preference/recent file), and \fIvalue\fP is the value to which it should be set.
.sp
If \fIprefname\fP is "uat", you can override settings in various user access
tables using the form "uat:\fIuat filename\fP:\fIuat record\fP".  \fIuat filename\fP
must be the name of a UAT file, e.g. \fIuser_dlts\fP.  \fIuat_record\fP must be in
the form of a valid record for that file, including quotes.  For instance, to
specify a user DLT from the command line, you would use
.sp
.if n .RS 4
.nf
.fam C
\-o "uat:user_dlts:\(rs"User 0 (DLT=147)\(rs",\(rs"cops\(rs",\(rs"0\(rs",\(rs"\(rs",\(rs"0\(rs",\(rs"\(rs""
.fam
.fi
.if n .RE
.RE
.sp
\-P <path setting>
.RS 4
.sp
Special path settings usually detected automatically.  This is used for
special cases, e.g. starting Stratoshark from a known location on an USB stick.
.sp
The criterion is of the form \fIkey:path\fP, where \fIkey\fP is one of:
.sp
\fBpersconf\fP:\fIpath\fP path of personal configuration files, like the
preferences files.
.sp
\fBpersdata\fP:\fIpath\fP path of personal data files, it\(cqs the folder initially
opened.  After the very first initialization, the recent file will keep the
folder last used.
.RE
.sp
\-r|\-\-read\-file  <infile>
.RS 4
Read event data from \fIinfile\fP, can be any supported capture file format
(including compressed files).  It\(cqs not possible to use named pipes or stdin
here, unlike \fBTShark\fP! To capture from a pipe or from stdin use \fB\-i \-\fP.
.RE
.sp
\-R|\-\-read\-filter  <read (display) filter>
.RS 4
When reading a capture file specified with the \fB\-r\fP flag, causes the
specified filter (which uses the syntax of display filters, rather than
that of capture filters) to be applied to all events read from the
capture file; events not matching the filter are discarded.
.RE
.sp
\-S
.RS 4
Automatically update the event display as events are coming in.
.RE
.sp
\-\-temp\-dir <directory>
.RS 4
.sp
Specifies the directory into which temporary files (including capture
files) are to be written.  The default behavior on UNIX\-compatible systems,
such as Linux, macOS, \(rs*BSD, Solaris, and AIX, is to use the environment
variable \fI$TMPDIR\fP if set, and the system default, typically \fI/tmp\fP, if it
is not.  On Windows, the \fI%TEMP%\fP environment variable is used, which
typically defaults to \fI%USERPROFILE%\(rsAppData\(rsLocal\(rsTemp\fP.
.RE
.sp
\-\-time\-stamp\-type <type>
.RS 4
Change the sources\(cqs timestamp method. See \-\-list\-time\-stamp\-types.
.RE
.sp
\-\-update\-interval  <interval>
.RS 4
Set the length of time in milliseconds between new event reports during
a capture. Also sets the granularity of file duration conditions.
The default value is 100ms.
.RE
.sp
\-v|\-\-version
.RS 4
Print the full version information and exit.
.RE
.sp
\-w  <outfile>
.RS 4
Set the default capture file name, or \*(Aq\-\*(Aq for standard output.
.RE
.sp
\-X <eXtension options>
.RS 4
.sp
Specify an option to be passed to an \fBStratoshark\fP module.  The eXtension option
is in the form \fIextension_key:value\fP, where \fIextension_key\fP can be:
.sp
\fBlua_script\fP:\fIlua_script_filename\fP tells \fBStratoshark\fP to load the given script in addition to the
default Lua scripts.
.sp
\fBlua_script\fP\fInum\fP:\fIargument\fP tells \fBStratoshark\fP to pass the given argument
to the lua script identified by \*(Aqnum\*(Aq, which is the number indexed order of the \*(Aqlua_script\*(Aq command.
For example, if only one script was loaded with \*(Aq\-X lua_script:my.lua\*(Aq, then \*(Aq\-X lua_script1:foo\*(Aq
will pass the string \*(Aqfoo\*(Aq to the \*(Aqmy.lua\*(Aq script.  If two scripts were loaded, such as \*(Aq\-X lua_script:my.lua\*(Aq
and \*(Aq\-X lua_script:other.lua\*(Aq in that order, then a \*(Aq\-X lua_script2:bar\*(Aq would pass the string \*(Aqbar\*(Aq to the second lua
script, namely \*(Aqother.lua\*(Aq.
.sp
\fBstdin_descr\fP:\fIdescription\fP tells \fBStratoshark\fP to use the given description when
capturing from standard input (\fB\-i \-\fP).
.RE
.sp
\-Y|\-\-display\-filter  <displaY filter>
.RS 4
Start with the given display filter.
.RE
.sp
\-z  <statistics>
.RS 4
.sp
Get \fBStratoshark\fP to collect various types of statistics and display the result
in a window that updates in semi\-real time.
.sp
Some of the currently implemented statistics are:
.RE
.sp
\fB\-z help\fP
.RS 4
Display all possible values for \fB\-z\fP.
.RE
.SH "DISSECTION OPTIONS"
.sp
\-d  <layer type>==<selector>,<decode\-as protocol>
.RS 4
.sp
Like Wireshark\(cqs \fBDecode As...\fP feature, this lets you specify how a
layer type should be dissected.  If the layer type in question (for example,
\fBtcp.port\fP or \fBudp.port\fP for a TCP or UDP port number) has the specified
selector value, packets should be dissected as the specified protocol.
.sp
.B Example 1. Decode As Port
.br
.RS 4
.sp
\fB\-d tcp.port==8888,http\fP will decode any traffic running over
TCP port 8888 as HTTP.
.RE
.sp
See the tshark(1) manual page for more examples.
.RE
.sp
\-\-disable\-all\-protocols
.RS 4
Disable dissection of all protocols.
.RE
.sp
\-\-disable\-protocol <proto_name>[,<proto_name>,...]
.RS 4
Disable dissection of proto_name.
Use a proto_name of \fBALL\fP to override
your chosen profile\(cqs default enabled protocol list and temporarily
disable all protocols.
.RE
.sp
\-\-disable\-heuristic <short_name>
.RS 4
Disable dissection of heuristic protocol.
.RE
.sp
\-\-enable\-protocol <proto_name>[,<proto_name>,...]
.RS 4
.sp
Enable dissection of proto_name.
Use a proto_name of \fBALL\fP to override
your chosen profile\(cqs default disabled protocol list and temporarily
enable all protocols which are enabled by default.
.sp
If a protocol is implicated in both \fB\-\-disable\-protocol\fP
and \fB\-\-enable\-protocol\fP, the protocol is enabled. This allows you to
temporarily disable all protocols but a list of exceptions.
Example: \fB\-\-disable\-protocol ALL \-\-enable\-protocol eth,ip\fP
.RE
.sp
\-\-enable\-heuristic <short_name>
.RS 4
Enable dissection of heuristic protocol.
.RE
.sp
\-K  <keytab>
.RS 4
.sp
Load kerberos crypto keys from the specified keytab file.
This option can be used multiple times to load keys from several files.
.sp
Example: \fB\-K krb5.keytab\fP
.RE
.sp
\-n
.RS 4
Disable network object name resolution (such as hostname, TCP and UDP port
names); the \fB\-N\fP option might override this one.
.RE
.sp
\-N  <name resolving flags>
.RS 4
.sp
Turn on name resolving only for particular types of addresses and port
numbers, with name resolving for other types of addresses and port
numbers turned off.  This option (along with \fB\-n\fP) can be specified
multiple times; the last value given overrides earlier ones. This option
and \fB\-n\fP override the options from the preferences, including preferences
set via the \fB\-o\fP option. If both \fB\-N\fP and \fB\-n\fP options are not present,
the values from the preferences are used, which default to \fB\-N dmN\fP.
.sp
The argument is a string that may contain the letters:
.sp
\fBd\fP to enable resolution from captured DNS packets
.sp
\fBg\fP to enable IP address geolocation information lookup from configured
MaxMind databases
.sp
\fBm\fP to enable MAC address resolution
.sp
\fBn\fP to enable network address resolution
.sp
\fBN\fP to enable using external resolvers (e.g., DNS) for network address
resolution; no effect without \fBn\fP also enabled.
.sp
\fBs\fP to enable address resolution using SNI information found in captured
handshake packets
.sp
\fBt\fP to enable transport\-layer port number resolution
.sp
\fBv\fP to enable VLAN IDs to names resolution
.RE
.sp
\-\-only\-protocols <protocols>
.RS 4
Only enable dissection of these protocols, comma separated. Disable everything else.
.RE
.sp
\-t  (a|ad|adoy|d|dd|e|r|u|ud|udoy)[.[N]]|.[N]
.RS 4
.sp
Set the format of the packet timestamp displayed in the default time
column.  The format can be one of:
.sp
\fBa\fP absolute: The absolute time, as local time in your time zone,
is the actual time the packet was captured, with no date displayed
.sp
\fBad\fP absolute with date: The absolute date, displayed as YYYY\-MM\-DD,
and time, as local time in your time zone, is the actual time and date
the packet was captured
.sp
\fBadoy\fP absolute with date using day of year: The absolute date,
displayed as YYYY/DOY, and time, as local time in your time zone,
is the actual time and date the packet was captured
.sp
\fBd\fP delta: The delta time is the time since the previous packet was
captured
.sp
\fBdd\fP delta_displayed: The delta_displayed time is the time since the
previous displayed packet was captured
.sp
\fBe\fP epoch: The time in seconds since epoch (Jan 1, 1970 00:00:00)
.sp
\fBr\fP relative: The relative time is the time elapsed between the first packet
and the current packet
.sp
\fBu\fP UTC: The absolute time, as UTC with a "Z" suffix, is the actual time
the packet was captured, with no date displayed
.sp
\fBud\fP UTC with date: The absolute date, displayed as YYYY\-MM\-DD,
and time, as UTC with a "Z" suffix, is the actual time and date the packet
was captured
.sp
\fBudoy\fP UTC with date using day of year: The absolute date, displayed
as YYYY/DOY, and time, as UTC with a "Z" suffix, is the actual time and date
the packet was captured
.sp
\fB.[N]\fP Set the precision: N is the number of decimals (0 through 9).
If using "." without N, automatically determine precision from trace.
.sp
The default format is relative with precision based on capture format.
.RE
.sp
\-u <s|hms>
.RS 4
.sp
Specifies how packet timestamp formats in \fB\-t\fP which are relative times
(i.e.  relative, delta, and delta_displayed) are displayed.  Valid choices are:
.sp
\fBs\fP for seconds
.sp
\fBhms\fP for hours, minutes, and seconds
.sp
The default format is seconds.
.RE
.SH "DIAGNOSTIC OPTIONS"
.sp
\-\-log\-level <level>
.RS 4
Set the active log level.
Supported levels in lowest to highest order are "noisy", "debug", "info", "message", "warning", "critical", and "error".
Messages at each level and higher will be printed, for example "warning" prints "warning", "critical", and "error" messages and "noisy" prints all messages.
Levels are case insensitive.
.RE
.sp
\-\-log\-fatal <level>
.RS 4
Abort the program if any messages are logged at the specified level or higher.
For example, "warning" aborts on any "warning", "critical", or "error" messages.
.RE
.sp
\-\-log\-domains <list>
.RS 4
Only print messages for the specified log domains, e.g. "GUI,Epan,sshdump".
List of domains must be comma\-separated. Can be negated with "!" as the first character (inverts the match).
.RE
.sp
\-\-log\-debug <list>
.RS 4
Force the specified domains to log at the "debug" level.
List of domains must be comma\-separated. Can be negated with "!" as the first character (inverts the match).
.RE
.sp
\-\-log\-noisy <list>
.RS 4
Force the specified domains to log at the "noisy" level.
List of domains must be comma\-separated. Can be negated with "!" as the first character (inverts the match).
.RE
.sp
\-\-log\-fatal\-domains <list>
.RS 4
Abort the program if any messages are logged for the specified log domains.
List of domains must be comma\-separated.
.RE
.sp
\-\-log\-file <path>
.RS 4
Write log messages and stderr output to the specified file.
.RE
.SH "FILES"
.sp
These files contain various \fBWireshark\fP configuration settings.
.sp
Preferences
.RS 4
.sp
The \fIpreferences\fP files contain global (system\-wide) and personal
preference settings.  If the system\-wide preference file exists, it is
read first, overriding the default settings.  If the personal preferences
file exists, it is read next, overriding any previous values.  Note: If
the command line flag \fB\-o\fP is used (possibly more than once), it will
in turn override values from the preferences files.
.sp
The preferences settings are in the form \fIprefname:value\fP,
one per line,
where \fIprefname\fP is the name of the preference
and \fIvalue\fP is the value to
which it should be set; white space is allowed between \fB:\fP and
\fIvalue\fP.  A preference setting can be continued on subsequent lines by
indenting the continuation lines with white space.  A \fB#\fP character
starts a comment that runs to the end of the line:
.sp
.if n .RS 4
.nf
.fam C
# Vertical scrollbars should be on right side?
# TRUE or FALSE (case\-insensitive).
gui.scrollbar_on_right: TRUE
.fam
.fi
.if n .RE
.sp
The global preferences file is looked for in the \fIwireshark\fP directory
under the \fIshare\fP subdirectory of the main installation directory.  On
macOS, this would typically be
\fI/Application/Wireshark.app/Contents/Resources/share\fP; on other
UNIX\-compatible systems, such as Linux, \(rs*BSD, Solaris, and AIX, this
would typically be \fI/usr/share/wireshark/preferences\fP for
system\-installed packages and \fI/usr/local/share/wireshark/preferences\fP
for locally\-installed packages; on Windows, this would typically be
\fIC:\(rsProgram Files\(rsWireshark\(rspreferences\fP.
.sp
On UNIX\-compatible systems, the personal preferences file is looked for
in \fI$XDG_CONFIG_HOME/wireshark/preferences\fP, (or, if
\fI$XDG_CONFIG_HOME/wireshark\fP does not exist while \fI$HOME/.wireshark\fP
does exist, \fI$HOME/.wireshark/preferences\fP); this is typically
\fI$HOME/.config/wireshark/preferences\fP.  On Windows,
the personal preferences file is looked for in
\fI%APPDATA%\(rsWireshark\(rspreferences\fP (or, if %APPDATA% isn\(cqt defined,
\fI%USERPROFILE%\(rsApplication Data\(rsWireshark\(rspreferences\fP).
.sp
Note: Whenever the preferences are saved by using the \fISave\fP button
in the \fIEdit:Preferences\fP dialog box, your personal preferences file
will be overwritten with the new settings, destroying any comments and
unknown/obsolete settings that were in the file.
.RE
.sp
Recent
.RS 4
.sp
The \fIrecent\fP file contains personal settings (mostly GUI related) such
as the current \fBWireshark\fP window size.  The file is saved at program exit and
read in at program start automatically.  Note: The command line flag \fB\-o\fP
may be used to override settings from this file.
.sp
The settings in this file have the same format as in the \fIpreferences\fP
files, and the same directory as for the personal preferences file is
used.
.sp
Note: Whenever Wireshark is closed, your recent file
will be overwritten with the new settings, destroying any comments and
unknown/obsolete settings that were in the file.
.RE
.sp
Disabled (Enabled) Protocols
.RS 4
.sp
The \fIdisabled_protos\fP files contain system\-wide and personal lists of
protocols that have been disabled, so that their dissectors are never
called.  The files contain protocol names, one per line, where the
protocol name is the same name that would be used in a display filter
for the protocol:
.sp
.if n .RS 4
.nf
.fam C
http
tcp     # a comment
.fam
.fi
.if n .RE
.sp
If a protocol is listed in the global \fIdisabled_protos\fP file it cannot
be enabled by the user.
Thus it is not displayed in the \fIAnalyze::Enabled Protocols\fP dialog box.
.sp
The global \fIdisabled_protos\fP file uses the same directory as the global
preferences file.
.sp
The personal \fIdisabled_protos\fP file uses the same directory as the
personal preferences file.
.sp
The \fIdisabled_protos\fP files list only protocols that are enabled by default
but have been disabled; protocols that are disabled by default (such as some
postdissectors) are not listed. There are analogous \fIenabled_protos\fP files
for protocols that are disabled by default but have been enabled.
.sp
Note: Whenever the disabled protocols list is saved by using the \fISave\fP
button in the \fIAnalyze:Enabled Protocols\fP dialog box, your personal
disabled protocols file will be overwritten with the new settings,
destroying any comments that were in the file.
.RE
.sp
Heuristic Dissectors
.RS 4
.sp
The \fIheuristic_protos\fP files contain system\-wide and personal lists of
heuristic dissectors and indicate whether they are enabled or disabled.
The files contain heuristic dissector unique short names, one per line,
followed by a comma and 0 for disabled and 1 for enabled:
.sp
.if n .RS 4
.nf
.fam C
quic,1
rtcp_stun,1
rtcp_udp,1
rtp_stun,0
rtp_udp,0
tls_tcp,1
.fam
.fi
.if n .RE
.sp
The global \fIheuristic_protos\fP file uses the same directory as the global
preferences file.
.sp
The personal \fIheuristic_protos\fP file uses the same directory as the
personal preferences file.
.RE
.sp
Name Resolution (hosts)
.RS 4
.sp
Entries in \fIhosts\fP files in the global and personal preferences
directory are used to resolve IPv4 and IPv6 addresses before any
other attempts are made to resolve them.
The file has the standard \fIhosts\fP file syntax; each line contains one
IP address and name, separated by whitespace. The personal \fIhosts\fP
file, if present, overrides the one in the global directory.
.sp
Capture filter name resolution is handled by libpcap on UNIX\-compatible
systems, such as Linux, macOS, \(rs*BSD, Solaris, and AIX, and Npcap
on Windows.  As such the Wireshark personal \fIhosts\fP file will
not be consulted for capture filter name resolution.
.RE
.sp
Name Resolution (subnets)
.RS 4
.sp
If an IPv4 address cannot be translated via name resolution (no exact
match is found) then a partial match is attempted via the \fIsubnets\fP file.
Both the global \fIsubnets\fP file and personal \fIsubnets\fP files are used
if they exist.
.sp
Each line of this file consists of an IPv4 address, a subnet mask length
separated only by a / and a name separated by whitespace. While the address
must be a full IPv4 address, any values beyond the mask length are subsequently
ignored.
.sp
An example is:
.sp
# Comments must be prepended by the # sign!
192.168.0.0/24 ws_test_network
.sp
A partially matched name will be printed as "subnet\-name.remaining\-address".
For example, "192.168.0.1" under the subnet above would be printed as
"ws_test_network.1"; if the mask length above had been 16 rather than 24, the
printed address would be "ws_test_network.0.1".
.RE
.sp
Name Resolution (ethers)
.RS 4
.sp
The \fIethers\fP files are consulted to correlate 6\-byte EUI\-48 and 8\-byte EUI\-64
hardware addresses to names.  First the personal \fIethers\fP file is tried and
if an address is not found there the global \fIethers\fP file is tried next.
.sp
The file has a similar format to that defined by ethers(5) on some UNIX\-like
systems.  Each line contains one hardware address and name, separated by
whitespace (tabs or spaces).  The hexadecimal digits of the hardware address
are separated by colons (:), dashes (\-) or periods (.).  The same separator
character must be used consistently in an address.  A \f(CR#\fP indicates a comment
that extends to the rest of the line. Both 6\-byte MAC and 8\-byte EUI\-64
addresses are supported.  The following four lines are valid lines of an
\fIethers\fP file:
.sp
.if n .RS 4
.nf
.fam C
ff:ff:ff:ff:ff:ff          Broadcast
c0\-00\-ff\-ff\-ff\-ff          TR_broadcast
00.00.00.00.00.00          Zero_broadcast
00:00:00:00:00:00:00:00    EUI64_zero_broadcast
.fam
.fi
.if n .RE
.sp
Note that this accepts a greater variety of formats than the file
defined by ethers(5) on most UN*X systems.
.sp
The global \fIethers\fP file is looked for in the \fI/etc\fP directory on
UNIX\-compatible systems, such as Linux, macOS, \(rs*BSD, Solaris, and AIX,
and in the main installation directory (for example, \fIC:\(rsProgram
Files\(rsWireshark\fP) on Windows systems.
.sp
The personal \fIethers\fP file is looked for in the same directory as the personal
preferences file.
.sp
Capture filter name resolution is handled by libpcap on UNIX\-compatible
systems and Npcap on Windows.  As such the Wireshark personal
\fIethers\fP file will not be consulted for capture filter name
resolution.
.RE
.sp
Name Resolution (manuf)
.RS 4
.sp
The \fImanuf\fP file is used to match the 3\-byte vendor portion of a 6\-byte
hardware address with the manufacturer\(cqs name; it can also contain well\-known
MAC addresses and address ranges specified with a netmask.  The format of the
file is similar the \fIethers\fP files, except that entries such as:
.sp
.if n .RS 4
.nf
.fam C
00:00:0C      Cisco     Cisco Systems, Inc
.fam
.fi
.if n .RE
.sp
can be provided, with the 3\-byte OUI and both an abbreviated and long name for
a vendor, and entries such as:
.sp
.if n .RS 4
.nf
.fam C
00\-00\-0C\-07\-AC/40     All\-HSRP\-routers
.fam
.fi
.if n .RE
.sp
can be specified, with a MAC address and a mask indicating how many bits
of the address must match.  The above entry, for example, has 40
significant bits, or 5 bytes, and would match addresses from
00\-00\-0C\-07\-AC\-00 through 00\-00\-0C\-07\-AC\-FF.  The mask need not be a
multiple of 8.
.sp
A global \fImanuf\fP file is looked for in the same directory as the global
preferences file, and a personal \fImanuf\fP file is looked for in the same
directory as the personal preferences file.
.sp
In earlier versions of Wireshark, official information from the IEEE
Registration Authority was distributed in this format as the global
\fImanuf\fP file. This information is now compiled in to speed program
startup, but the internal information can be written out in this format
with \fBtshark \-G manuf\fP.
.sp
In addition to the \fImanuf\fP file, another file with the same format,
\fIwka\fP, is looked for in the global directory. This file is distributed
with Wireshark, and contains data about well\-known MAC adddresses and
address ranges assembled from various non IEEE but respected sources.
.RE
.sp
Name Resolution (services)
.RS 4
.sp
The \fIservices\fP file is used to translate port numbers into names.
Both the global \fIservices\fP file and personal \fIservices\fP files are used
if they exist.
.sp
The file has the standard \fIservices\fP file syntax; each line contains one
(service) name and one transport identifier separated by white space.  The
transport identifier includes one port number and one transport protocol name
(typically tcp, udp, or sctp) separated by a /.
.sp
An example is:
.sp
mydns       5045/udp     # My own Domain Name Server
mydns       5045/tcp     # My own Domain Name Server
.sp
In earlier versions of Wireshark, official information from the IANA
Registry was distributed in this format as the global \fIservices\fP file.
This information is now compiled in to speed program startup, but the
internal information can be written out in this format with \fBtshark \-G services\fP.
.RE
.sp
Name Resolution (ipxnets)
.RS 4
.sp
The \fIipxnets\fP files are used to correlate 4\-byte IPX network numbers to
names.  First the global \fIipxnets\fP file is tried and if that address is not
found there the personal one is tried next.
.sp
The format is the same as the \fIethers\fP
file, except that each address is four bytes instead of six.
Additionally, the address can be represented as a single hexadecimal
number, as is more common in the IPX world, rather than four hex octets.
For example, these four lines are valid lines of an \fIipxnets\fP file:
.sp
.if n .RS 4
.nf
.fam C
C0.A8.2C.00              HR
c0\-a8\-1c\-00              CEO
00:00:BE:EF              IT_Server1
110f                     FileServer3
.fam
.fi
.if n .RE
.sp
The global \fIipxnets\fP file is looked for in the \fI/etc\fP directory on
UNIX\-compatible systems, such as Linux, macOS, \(rs*BSD, Solaris, and AIX,
and in the main installation directory (for example, \fIC:\(rsProgram
Files\(rsWireshark\fP) on Windows systems.
.sp
The personal \fIipxnets\fP file is looked for in the same directory as the
personal preferences file.
.RE
.sp
Name Resolution (ss7pcs)
.RS 4
.sp
The \fIss7pcs\fP file is used to translate SS7 point codes to names.
It is read from the personal configuration directory.
.sp
Each line in this file consists of one network indicator followed by a dash
followed by a point code in decimal and a node name separated by whitespace.
An example is:
.sp
.if n .RS 4
.nf
.fam C
2\-1234 MyPointCode1
.fam
.fi
.if n .RE
.RE
.sp
Name Resolution (vlans)
.RS 4
.sp
The \fIvlans\fP file is used to translate VLAN tag IDs into names.
It is read from the personal configuration directory.
.sp
Each line in this file consists of one VLAN tag ID separated by whitespace
from a name.  An example is:
.sp
.if n .RS 4
.nf
.fam C
123    Server\-Lan
2049   HR\-Client\-LAN
.fam
.fi
.if n .RE
.RE
.sp
Capture Filters
.RS 4
.sp
The \fIcfilters\fP files contain system\-wide and personal capture filters.
Each line contains one filter, starting with the string displayed in the
dialog box in quotation marks, followed by the filter string itself:
.sp
.if n .RS 4
.nf
.fam C
"HTTP" port 80
"DCERPC" port 135
.fam
.fi
.if n .RE
.sp
The global \fIcfilters\fP file uses the same directory as the
global preferences file.
.sp
The personal \fIcfilters\fP file uses the same directory as the personal
preferences file.  It is written through the Capture:Capture Filters
dialog.
.sp
If the global \fIcfilters\fP file exists, it is used only if the personal
\fIcfilters\fP file does not exist; global and personal capture filters are
not merged.
.RE
.sp
Display Filters
.RS 4
.sp
The \fIdfilters\fP files contain system\-wide and personal display filters.
Each line contains one filter, starting with the string displayed in the
dialog box in quotation marks, followed by the filter string itself:
.sp
.if n .RS 4
.nf
.fam C
"HTTP" http
"DCERPC" dcerpc
.fam
.fi
.if n .RE
.sp
The global \fIdfilters\fP file uses the same directory as the
global preferences file.
.sp
The personal \fIdfilters\fP file uses the same directory as the
personal preferences file.  It is written through the Analyze:Display
Filters dialog.
.sp
If the global \fIdfilters\fP file exists, it is used only if the personal
\fIdfilters\fP file does not exist; global and personal display filters are
not merged.
.RE
.sp
Display Filter Macros
.RS 4
.sp
The \fIdmacros\fP files contain system\-wide and personal display filter macros.
Each line contains one filter, starting with the string displayed in the
dialog box in quotation marks, followed by the macro expression itself:
.sp
.if n .RS 4
.nf
.fam C
"private_ipv6" ipv6 && $1 == fc00::/7
"private_ethernet" $1[0] & 0x0F == 2
"private_ipv4" $1 == 192.168.0.0/16 or $1 == 172.16.0.0/12 or $1 == 10.0.0.0/8
.fam
.fi
.if n .RE
.sp
The global \fIdmacros\fP file uses the same directory as the
global preferences file.
.sp
The personal \fIdmacros\fP file uses the same directory as the
personal preferences file.  It is written through the Analyze:Display
Filter Macros dialog.
.sp
If the global \fIdmacros\fP file exists, it is used only if the personal
\fIdmacros\fP file does not exist; global and personal display filters are
not merged.
.sp
Prior to Wireshark 4.4, a \fIdfilter_macros\fP file with a somewhat different
syntax was used. That file is looked for at startup if a \fIdmacros\fP file is
not found and used to migrate to the new format.
.RE
.sp
Color Filters (Coloring Rules)
.RS 4
.sp
The \fIcolorfilters\fP files contain system\-wide and personal color filters.
Each line contains one filter, starting with the string displayed in the
dialog box, followed by the corresponding display filter.  Then the
background and foreground colors are appended:
.sp
.if n .RS 4
.nf
.fam C
# a comment
@tcp@tcp@[59345,58980,65534][0,0,0]
@udp@udp@[28834,57427,65533][0,0,0]
.fam
.fi
.if n .RE
.sp
The global \fIcolorfilters\fP file uses the same directory as the
global preferences file.
.sp
The personal \fIcolorfilters\fP file uses the same directory as the
personal preferences file.  It is written through the View:Coloring Rules
dialog.
.sp
If the global \fIcolorfilters\fP file exists, it is used only if the personal
\fIcolorfilters\fP file does not exist; global and personal color filters are
not merged.
.RE
.sp
Plugins
.RS 4
.sp
Wireshark looks for plugins in both a personal plugin folder and a
global plugin folder.
.sp
On UNIX\-compatible systems, such as Linux, macOS, \(rs*BSD, Solaris, and
AIX, the global plugin directory is \fIlib/wireshark/plugins/\fP (on
some systems substitute \fIlib64\fP for \fIlib\fP) under the main installation
directory (for example, \fI/usr/local/lib/wireshark/plugins/\fP). The personal
plugin directory is \fI$HOME/.local/lib/wireshark/plugins\fP.
.sp
On macOS, if Wireshark is installed as an application bundle, the global plugin
folder is instead \fI%APPDIR%/Contents/PlugIns/wireshark\fP.
.sp
On Windows, the global plugin folder is \fIplugins/\fP under the main
installation directory (for example, \fIC:\(rsProgram Files\(rsWireshark\(rsplugins\(rs\fP).
The personal plugin folder is \fI%APPDATA%\(rsWireshark\(rsplugins\fP (or, if
%APPDATA% isn\(cqt defined, \fI%USERPROFILE%\(rsApplication Data\(rsWireshark\(rsplugins\fP).
.sp
Lua plugins are stored in the plugin folders;
compiled plugins are stored in subfolders of the plugin folders, with
the subfolder name being the Wireshark minor version number (X.Y). There is
another hierarchical level for each Wireshark plugin type (libwireshark,
libwiretap and codecs).  For example, the location for a libwireshark plugin
\fIfoo.so\fP (\fIfoo.dll\fP on Windows) would be \fIPLUGINDIR/X.Y/epan\fP
(libwireshark used to be called libepan; the other folder names are \fIcodecs\fP
and \fIwiretap\fP).
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
On UNIX\-compatible systems, Lua plugins (but not binary plugins) may also
be placed in \fI$XDG_CONFIG_HOME/wireshark/plugins\fP,
(or, if \fI$XDG_CONFIG_HOME/wireshark\fP does not exist while \fI$HOME/.wireshark\fP
does exist, \fI$HOME/.wireshark/plugins\fP.)
.sp .5v
.RE
.sp
Note that a dissector plugin module may support more than one protocol;
there is not necessarily a one\-to\-one correspondence between dissector plugin
modules and protocols.  Protocols supported by a dissector plugin module are
enabled and disabled in the same way as protocols built into Wireshark.
.RE
.SH "ENVIRONMENT VARIABLES"
.sp
WIRESHARK_CONFIG_DIR
.RS 4
.sp
This environment variable overrides the location of personal
configuration files.  On UNIX\-compatible systems, such as Linux, macOS,
\(rs*BSD, Solaris, and AIX, it defaults to \fI$XDG_CONFIG_HOME/wireshark\fP
(or, if that directory doesn\(cqt exist but \fI$HOME/.wireshark\fP does
exist, \fI$HOME/.wireshark\fP); this is typically
\fI$HOME/.config/wireshark\fP.  On Windows, it defaults to
\fI%APPDATA%\(rsWireshark\fP (or, if %APPDATA% isn\(cqt defined,
\fI%USERPROFILE%\(rsApplication Data\(rsWireshark\fP).  Available since
Wireshark 3.0.
.RE
.sp
WIRESHARK_DEBUG_WMEM_OVERRIDE
.RS 4
Setting this environment variable forces the wmem framework to use the
specified allocator backend for \fBall\fP allocations, regardless of which
backend is normally specified by the code. This is mainly useful to developers
when testing or debugging. See \fIREADME.wmem\fP in the source distribution for
details.
.RE
.sp
WIRESHARK_RUN_FROM_BUILD_DIRECTORY
.RS 4
This environment variable causes the plugins and other data files to be
loaded from the build directory (where the program was compiled) rather
than from the standard locations.  It has no effect when the program in
question is running with root (or setuid) permissions on UNIX\-compatible
systems, such as Linux, macOS, \(rs*BSD, Solaris, and AIX.
.RE
.sp
WIRESHARK_DATA_DIR
.RS 4
This environment variable causes the various data files to be loaded from
a directory other than the standard locations.  It has no effect when the
program in question is running with root (or setuid) permissions on
UNIX\-compatible systems.
.RE
.sp
WIRESHARK_EXTCAP_DIR
.RS 4
This environment variable causes the various extcap programs and scripts
to be run from a directory other than the standard locations.  It has no
effect when the program in question is running with root (or setuid)
permissions on UNIX\-compatible systems.
.RE
.sp
WIRESHARK_PLUGIN_DIR
.RS 4
This environment variable causes the various plugins to be loaded from
a directory other than the standard locations.  It has no effect when the
program in question is running with root (or setuid) permissions on
UNIX\-compatible systems.
.RE
.sp
WIRESHARK_ABORT_ON_DISSECTOR_BUG
.RS 4
If this environment variable is set, \fBStratoshark\fP will call abort(3)
when a dissector bug is encountered.  abort(3) will cause the program to
exit abnormally; if you are running \fBStratoshark\fP in a debugger, it
should halt in the debugger and allow inspection of the process, and, if
you are not running it in a debugger, it will, on some OSes, assuming
your environment is configured correctly, generate a core dump file.
This can be useful to developers attempting to troubleshoot a problem
with a protocol dissector.
.RE
.sp
WIRESHARK_ABORT_ON_TOO_MANY_ITEMS
.RS 4
If this environment variable is set, \fBStratoshark\fP will call abort(3)
if a dissector tries to add too many items to a tree (generally this
is an indication of the dissector not breaking out of a loop soon enough).
abort(3) will cause the program to exit abnormally; if you are running
\fBStratoshark\fP in a debugger, it should halt in the debugger and allow
inspection of the process, and, if you are not running it in a debugger,
it will, on some OSes, assuming your environment is configured correctly,
generate a core dump file.  This can be useful to developers attempting to
troubleshoot a problem with a protocol dissector.
.RE
.sp
WIRESHARK_QUIT_AFTER_CAPTURE
.RS 4
Cause \fBStratoshark\fP to exit after the end of the capture session.  This
doesn\(cqt automatically start a capture; you must still use \fB\-k\fP to do
that.  You must also specify an autostop condition, e.g.  \fB\-c\fP or \fB\-a
duration:...\fP.  This means that you will not be able to see the results
of the capture after it stops; it\(cqs primarily useful for testing.
.RE
.sp
WIRESHARK_LOG_LEVEL
.RS 4
This environment variable controls the verbosity of diagnostic messages to
the console. From less verbose to most verbose levels can be \f(CRcritical\fP,
\f(CRwarning\fP, \f(CRmessage\fP, \f(CRinfo\fP, \f(CRdebug\fP or \f(CRnoisy\fP. Levels above the
current level are also active. Levels \f(CRcritical\fP and \f(CRerror\fP are always
active.
.RE
.sp
WIRESHARK_LOG_FATAL
.RS 4
Sets the fatal log level. Fatal log levels cause the program to abort.
This level can be set to \f(CRError\fP, \f(CRcritical\fP or \f(CRwarning\fP. \f(CRError\fP is
always fatal and is the default.
.RE
.sp
WIRESHARK_LOG_DOMAINS
.RS 4
This environment variable selects which log domains are active. The filter is
given as a case\-insensitive comma separated list. If set only the included
domains will be enabled. The default domain is always considered to be enabled.
Domain filter lists can be preceded by \*(Aq!\*(Aq to invert the sense of the match.
.RE
.sp
WIRESHARK_LOG_DEBUG
.RS 4
List of domains with \f(CRdebug\fP log level. This sets the level of the provided
log domains and takes precedence over the active domains filter. If preceded
by \*(Aq!\*(Aq this disables the \f(CRdebug\fP level instead.
.RE
.sp
WIRESHARK_LOG_NOISY
.RS 4
Same as above but for \f(CRnoisy\fP log level instead.
.RE
.SH "AUTHORS"
.sp
Stratoshark would not be the powerful, featureful application it is without the generous contributions of hundreds of developers.
.sp
A complete list of authors can be found in the AUTHORS file in Wireshark\(cqs source code repository.
.SH "SEE ALSO"
.sp
wireshark\-filter(4), tshark(1), editcap(1), dumpcap(1), mergecap(1)
.SH "NOTES"
.sp
This is the manual page for \fBStratoshark\fP 0.9.2.
The latest version of \fBStratoshark\fP can be found at
.URL "https://stratoshark.org/" "" "."
.sp
HTML versions of the Wireshark project man pages are available at
.URL "https://www.wireshark.org/docs/man\-pages/" "" "."